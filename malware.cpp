#include <iostream>
#include <vector>
#include <thread>
#include <chrono>

void carga_cpu() {
    while (true) {}
}

void aumentar_consumo_cpu() {
    try {
        // Solicita ao usuário a intensidade da carga da CPU
        double intensidade_cpu = 0.8;  // Exemplo de intensidade

        if (intensidade_cpu <= 0 || intensidade_cpu > 1) {
            std::cout << "Intensidade inválida. Deve estar entre 0 e 1." << std::endl;
            return;
        }

        // Calcula o número de threads para atingir a intensidade desejada
        unsigned int num_threads = std::thread::hardware_concurrency();
        std::vector<std::thread> threads_cpu;

        for (unsigned int i = 0; i < num_threads; ++i) {
            threads_cpu.emplace_back(carga_cpu);
        }

        while (true) {
            for (auto& thread : threads_cpu) {
                thread.join();
                threads_cpu.emplace_back(carga_cpu);
            }
            std::this_thread::sleep_for(std::chrono::seconds(static_cast<int>(intensidade_cpu))); // Controla a intensidade da carga da CPU
        }
    } catch (const std::exception& e) {
        std::cerr << "Teste de CPU interrompido: " << e.what() << std::endl;
    }
}

void aumentar_consumo_memoria() {
    try {
        long consumo_memoria = 900; // Começa com 900 MB
        long aumento = 900;        // Aumenta em 900 MB a cada iteração
        bool limite_atingido = false; // Variável para verificar se o limite foi atingido

        unsigned int vezes = 100;

        for (unsigned int i = 0; i < vezes; ++i) {
            if (!limite_atingido) {
                // Aumenta o consumo de memória
                long consumo_atual = 0;

                // Verifica se o consumo total ultrapassa o limite do sistema
                long limite_sistema = 16 * 1024; // Limite de memória do sistema em MB (exemplo)

                if (consumo_atual + consumo_memoria > limite_sistema) {
                    std::cout << "Consumo de memória atingiu o limite do sistema (" << limite_sistema << " MB). Entrando em loop." << std::endl;
                    limite_atingido = true;
                    while (true) {}
                } else {
                    // Alocar memória adicional
                    consumo_atual += consumo_memoria;
                    char* memoria_adicional = new char[consumo_memoria * 1024 * 1024];

                    // Imprime informações sobre o consumo de memória
                    std::cout << "Consumo de memória atual: " << consumo_atual << " MB" << std::endl;
                    std::cout << "Consumo de memória após alocação: " << consumo_atual << " MB" << std::endl;
                    std::cout << "Alocação de memória: " << consumo_memoria << " MB" << std::endl;

                    // Atualiza o valor de consumo_memoria para a próxima iteração
                    consumo_memoria += aumento;
                }
            }
        }
    } catch (const std::exception& e) {
        std::cerr << "Teste de memória interrompido: " << e.what() << std::endl;
    }
}

int main() {
    std::thread thread_cpu(aumentar_consumo_cpu);
    std::thread thread_memoria(aumentar_consumo_memoria);

    thread_cpu.join();
    thread_memoria.join();

    return 0;
}